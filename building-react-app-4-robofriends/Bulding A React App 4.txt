Building A React App 4
- Make the app more realistic.
- Use API to make website realistic.
-https://reactjs.org/docs/react-component.html
-https://jsonplaceholder.typicode.com/
-https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API


What API?
- We want when website gets loaded, it can make a request somewhere out there. And grab these information from a server.


jsonplaceholder: Have a nice URL that we can use and they returned what we need, name, id , username. Using this will make our app more realistic.



LifeCycle Method:
Three Section
- Mounting
- Updating
- Unmounting
LifeCycle Hooks: they get run everytime a component does something and it comes with react. So you can put them into your class component and they will automatically get triggered.

Mounting:
The way react work is called 'mounting'. When the webpage got refresh, the App component, get mounted into the document.getElementById('root').
When we mount a component, we're replacing the 'root' and adding our entire 'App'.
LifeCycle Hooks:
-constructor()
-static getDerivedStateFromProps()
-render()
-componentDidMount() : https://stackoverflow.com/questions/33749497/why-and-when-to-use-componentdidmount-in-react-js


Updating:
Whenever a component changes.
Eg: When we had the list, everytime i type something, the CardList component gets re-rendered because we have new information. The function receives new inputs. Same with the input component.
LifeCycle Hooks:
-static getDerivedStateFromProps()
-shouldComponentUpdate()
-render()
-getSnapshotBeforeUpdate()
-componentDidUpdate()


Unmounting:
When a component is removed from a page.
Eg: If we change to other page, the component will unmount. The App component will get deleted from the page.
LifeCycle Hooks:
-componentWillUnmount()



App.js
- Smart component
- has 'state' that describe our app. Because have 'state' we called them smart component.
- smart component tend to have class syntax.
- React comes with a few other things inside of Components that we can use are called 'lifecycle' method.
- 'lifecycle' method, if we run these, it will automatically trigger when this App gets loaded on the website. 
-We want to use componentDidMount(), which gets called after render(). 


1) In real life, when we start up this app this.state.robots would actually be an empty array. Because its nothing there, we havent grab the users.
old:
    this.state = {
      robots: robots,
      searchfield: ''
    }
new:
    this.state = {
      robots: [],
      searchfield: ''
    }
2) add componentDidMount(); 
    - 'Lifecycle Mounting | lifecycle hooks'
    -  Because this is part of react,'Notice that i'm not using arrow functions here'
3) Add this.setState({robots:robots}) 
    - When a component does mount, we can set the robots from the javascript file.
    - update the 'state' in componentDidMount(). because we updated the 'state', everytime the state changes, it runs the lifecycle 'updating', and it run render again.
    -So, because it goes from an empty array to a robot's list, render gets re-run, and the virtual DOM notices that there's a difference, and repaints our web browser to include the robots.
4) Removed import {robots} from './robots';
5) Add 'fetch' HTTP request
code:
fetch('https://jsonplaceholder.typicode.com/users')
.then(response=>response.json())
.then(user=>this.setState({robots:user}))

Explanation:
(1) fetch('https://jsonplaceholder.typicode.com/users')
    - We fetch whatever the user are.
    - Cool way to grab the robots list using HTTP REQUEST 'fetch'
    - fetch is a method on the window.object
    - fetch is a tool for us to make requests to a server. In this 'https://jsonplaceholder.typicode.com/users' is the server
    - Question (USERFUL): if you're wondering, what if fetching server was really slow or took 5 second above and we have whole ton of users.
      Answer: Well, in this case you can do something like an IF statement in render(). (THIS IS JUST JAVASCRIPT)
      if robots.length = 0, return an 'h1' that says 'LOADING'
      else return the CardList, SearchBox component
      Code:
      if(this.state.robots.length === 0){
        return <h1>Loading</h1> //LOADING BAR
      }else{
        return(
          <div className="tc">  
            <h1>RoboFriends</h1>
            <SearchBox searchChange={this.onSearchChange}/>
            <CardList robots={filteredRobots}/>
          </div>
        );
      };
(2) .then(response=>response.json())
    - We're getting a response
    - Received a response and convert the response into json
(3) .then(user=>this.setState({robots:user}))
    - We're getting the users and updating the users with setState
    - In here, we can say this.setState robots = user
    - robot or user, because in this case we're getting users.
    - If user return to an empty object. It wont receive robots. It will only receive the robots after update with these users.